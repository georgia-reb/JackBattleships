/*
 * Random.jack
 * Georgia Klein
 * 2020-04-03
 * Project 9: High-Level Language
 * Advanced Computer Science: Nand to Tetris
 * 
 * This Random class is adapted from a project done by user xctom
 * on Github.
 * https://github.com/xctom/Nand2Tetris/blob/master/projects/09/PigDice/Random.jack
 *
 * A seed is required to being the generator, which gives a random
 * sequence of numbers based off of the seed.
 */

/*
 * Reference: http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/Random-number-generator-for-hack-cpu-td4025503.html#a4025511
 *
 * There is no random generator in Jack
 * So we need to generate pseudo random number by ourself
 * This class is quite simple random number generator
 *
 * 
 * Improvement: let the number be more random by adding shift number
 */

class Random {
    field int seed; // Random seed
    field int calledTime;

    constructor Random new(int seedIn) {
        let seed = seedIn;
        let seed = rand();
        let calledTime = 0;

        return this;
    }

    method int rand() {
        // Returns a random number in the range 0..32767

        let seed = seed + 20251;

        if (seed < 0) {
            let seed = seed - 32767 - 1;
        }

        return seed;
    }

    method int randRange(int range) {
        // Returns a random number in the range 0..range
        
        var int mask;
        var int ret;

        let mask = 1;
        while (mask < range) {
            let mask = mask * 2 + 1;
        }

        let ret = rand() & mask;
        let calledTime = calledTime + 1;

        while (ret > range) {
            let ret = rand() & mask;
            let calledTime = calledTime + 1;
            let ret = ret & getShift();
        }

        return ret;
    }

    method int getShift() {
        // Get new shift number according to called times.
        
        var int temp;

        let calledTime = calledTime + 1;
        let temp = calledTime;
        
        while(temp > 9){
            let temp = temp - 9;
        }

        return temp;
    }

    method void addCallTime(int times){
        let calledTime = calledTime + times;
        return;
    }
    
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}